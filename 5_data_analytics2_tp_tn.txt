import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression  
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score

df = pd.read_csv('datasets/Social_Network_Ads.csv')

Features = df.drop(['User ID', 'Purchased', 'Gender'], axis=1)
Target = df['Purchased']

x_train, x_test, y_train, y_test = train_test_split(Features, Target, test_size=0.25, random_state=0)

#Feature Scaling

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

LR = LogisticRegression(random_state=0)
LR.fit(x_train, y_train)

y_test_pred = LR.predict(x_test)

score = accuracy_score(y_test, y_test_pred)
print(f"Accuracy: {score*100}%")

matrix = confusion_matrix(y_test, y_test_pred)
print("\nConfusion Matrix:")
print(matrix)

TN = matrix[0][0]
FP = matrix[0][1]
FN = matrix[1][0]
TP = matrix[1][1]

print('\nMetrics:')
print('True Positive (TP):', TP)
print('True Negative (TN):', TN)
print('False Positive (FP):', FP)
print('False Negative (FN):', FN)

accuracy = (TP + TN) / (TP + TN + FP + FN)
error_rate = 1 - accuracy
precision = TP / (TP + FP) if (TP + FP) != 0 else 0
recall = TP / (TP + FN) if (TP + FN) != 0 else 0

print(f"Accuracy: {accuracy}")
print(f"Error Rate: {error_rate}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")